name: Terraform-Azure

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
      
  pull_request:
    branches:
      - main
  workflow_dispatch: #this attribute will enable the manual run to the pipeline

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
  
env:
  ROOT_PATH: '${{github.workspace}}/terraform'
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
  BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
  BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}

  STAGE_NAME: production

jobs:

  Terraform-Build-Pipeline:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5
        terraform_wrapper: false

    - id: init
      name: Terraform Init
      env:
        TF_VAR_application_name: ${{ env.APPLICATION_NAME }}
        TF_VAR_environment_name: ${{ env.ENVIRONMENT_NAME }}
        TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}
      working-directory: ${{ env.ROOT_PATH }}
      run: |
        terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
          -backend-config="key=$TF_BACKEND_KEY"

        echo 'Terraform Init completed successfully'
    - id: plan
      name: Terraform Plan
      working-directory: ${{ env.ROOT_PATH }}
      run: |
        terraform plan

        echo $resource_group_name
        resource_group_name=$(terraform output -raw resource_group_name)
        echo 'Terraform Plan completed successfully'

  Terraform-Deploy-Pipeline:
    runs-on: ubuntu-latest
    needs: [Terraform-Build-Pipeline]
    steps:
    - id: apply
      name: Terraform apply
      working-directory: ${{ env.ROOT_PATH }}
      run: terraform apply -auto-approve
   
        echo $resource_group_name
        resource_group_name=$(terraform output -raw resource_group_name)
        echo 'Terraform apply completed successfully'
